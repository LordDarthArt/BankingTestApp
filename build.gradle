import java.util.regex.Matcher
import java.util.regex.Pattern

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // Root project variables
        gradle_version = '4.0.0-alpha01'
        kotlin_version = '1.3.60-eap-25'

        // SDK
        compile_sdk_version = 29
        min_sdk_version = 21
        build_tools_version = '29.0.2'

        // Base
        appcompat_version = '1.1.0'
        legacy_support_version = '1.0.0'
        card_view_version = "1.0.0"
        grid_layout_version = "1.0.0"
        recycler_view_version = "1.1.0-rc01"
        constraint_layout_version = '2.0.0-beta3'
        material_version = '1.2.0-alpha01'
        androidx_core_version = '1.2.0-beta01'
        fragment_ktx_version = '1.2.0-rc01'

        // Android's Architecture Components
        androidx_architecture_components_version = '2.2.0-rc01'

        // Databinding Library
        databinding_library_version = '3.2.0-alpha10'

        // Coroutines
        coroutines_version = '1.3.0'

        // Retrofit
        retrofit_version = '2.6.2'

        // Glide
        glide_version = '4.10.0'

        // Room
        room_version = '2.2.1'

        // Androidx Preferences
        androidx_preferences_manager = "1.1.0"

        // CircleImageView
        circle_image_view_version = '3.0.1'
    }

    def versionPatchAndNumber = 0

    ext.getCurrentFlavor = { ->
        Gradle gradle = getGradle()
        String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

        Pattern pattern

        if (tskReqStr.contains("assemble"))
            pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
        else
            pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

        Matcher matcher = pattern.matcher(tskReqStr)

        if (matcher.find())
            return matcher.group(1).toLowerCase()
        else {
            println "NO MATCH FOUND"
            return ""
        }
    }

    def versionPropsFile = file("version.properties")

    Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    ext.versionMajor = 1
    ext.versionMinor = 0
    ext.versionPatch = versionProps["VERSION_PATCH"].toInteger() + versionPatchAndNumber
    ext.versionBuild = versionProps["VERSION_BUILD"].toInteger() + 1
    ext.versionNumber = versionProps["VERSION_NUMBER"].toInteger() + versionPatchAndNumber

    versionProps["VERSION_PATCH"] = versionPatch.toString()
    versionProps["VERSION_BUILD"] = versionBuild.toString()
    versionProps["VERSION_NUMBER"] = versionNumber.toString()

    versionProps.store(versionPropsFile.newWriter(), null)

    repositories {
        google()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$gradle_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
